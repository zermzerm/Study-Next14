import Link from "next/link";
import "./globals.css";
import { Control } from "./Control";

// 데이터를 사용자와 주고 받지 않는 페이지(정적) => 서버 컴포넌트
// *서버 컴포넌트와 클라이언트 컴포넌트의 장단점 조사
// 사용자와 주고 받는 페이지 => 클라이언트 컴포넌트
// metadata -> 얘는 서버 컴포넌트에서 사용가능
export const metadata = {
  title: "App Router study",
  description: "Generated by pks",
};

export default async function RootLayout({ children }) {
  //서버 컴포넌트에서 useState, useEffect 불가 -> 이걸 client 컴포넌트로 바꾸려면 맨 위에 "use client" 적으면 된다
  const resp = await fetch(process.env.NEXT_PUBLIC_API_URL + "topics", {
    cache: "no-store",
  });
  // 캐쉬 no store 저장 안한다 -> 효율은 떨어지지만 간단한 코드에선 데이터 바뀔때마다 재 랜더링
  // router.refresh()했을 때 캐쉬가 없으면 새롭게 데이터 받아온다.
  // Revalidating을 이용하면 캐쉬 가진것과 아닌것과 구분해서 가능 -> 추후에 공부
  const topics = await resp.json();
  return (
    <html>
      <body>
        <h1>
          <Link href="/">HOME</Link>
        </h1>
        <ol>
          {topics.map((topic) => {
            return (
              <li key={topic.id}>
                <Link href={`/read/${topic.id}`}>{topic.title}</Link>
              </li>
            );
          })}
        </ol>
        {children}

        <Control />
      </body>
    </html>
  );
}
